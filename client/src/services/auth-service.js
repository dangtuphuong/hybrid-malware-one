import axios from "axios";

const API_URL = "http://localhost:5000/api";

const options = { headers: { "Content-Type": "application/json" } };

const register = async (params) => {
  try {
    const res = await axios.post(`${API_URL}/register`, params, options);
    console.log(res);

    if (res.data && res.data.user) {
      localStorage.setItem("user", JSON.stringify(res.data.user));
      return { success: true, data: res.data };
    } else {
      console.error(
        "Registration failed:",
        res.data.error || "No user data returned"
      );
      return {
        success: false,
        error: res.data.error || "No user data returned",
      };
    }
  } catch (error) {
    console.error(
      "Error during registration:",
      error.response?.data || error.message || "An unexpected error occurred"
    );
    return {
      success: false,
      error:
        error.response?.data?.error ||
        error.message ||
        "An unexpected error occurred",
    };
  }
};

const login = async ({ email, password }) => {
  try {
    const res = await axios.post(
      `${API_URL}/authenticate`,
      {
        email,
        password,
      },
      options
    );

    if (res.data && res.data.user) {
      localStorage.setItem("user", JSON.stringify(res.data.user));
      return { success: true, data: res.data };
    } else {
      console.error("Login failed:", res.data.error || "No user data returned");
      return {
        success: false,
        error: res.data.error || "No user data returned",
      };
    }
  } catch (error) {
    console.error(
      "Error during login:",
      error.response?.data || error.message || "An unexpected error occurred"
    );
    return {
      success: false,
      error:
        error.response?.data?.error ||
        error.message ||
        "An unexpected error occurred",
    };
  }
};

const logout = async () => localStorage.removeItem("user");

const getCurrentUser = () => JSON.parse(localStorage.getItem("user"));

const AuthService = { register, login, logout, getCurrentUser };

export default AuthService;
