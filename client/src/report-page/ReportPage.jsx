/* eslint-disable react-hooks/exhaustive-deps */
import {
  Grid2,
  Typography,
  Box,
  FormControl,
  InputLabel,
  Select,
  OutlinedInput,
  Chip,
  MenuItem,
  Paper,
} from "@mui/material";
import { useParams } from "react-router-dom";
import BarChart from "./BarChart.jsx";
import MultiBarChart from "./MultiBarChart.jsx";
import MalwareDistChart from "./MalwareDistChart.jsx";
import ConfusionMatrixTable from "./ConfusionMatrixTable.jsx";
import PageLayout from "../components/PageLayout.jsx";
import DataService from "../services/data-service";
import Metadata from "./Metadata.jsx";
import { useEffect, useState, useMemo } from "react";

const ALL = "All";

const ReportPage = () => {
  const { reportId } = useParams();
  const [loading, setLoading] = useState(false);
  const [report, setReport] = useState({});
  const [models, setModels] = useState({});
  const [selectedFilterModels, setSelectedFilterModels] = useState([
    "Random Forest",
    "XGBoost",
    "Hybrid",
  ]);
  const [selectedFilterMalware, setSelectedFilterMalware] = useState(ALL);

  const isAll = selectedFilterMalware === ALL;

  useEffect(() => {
    setLoading(true);
    DataService.getReportById(reportId)
      .then((res) => {
        setReport(res?.data?.report ?? {});
        setModels(res?.data?.models ?? {});
      })
      .catch((err) => {
        console.log(err);
      })
      .finally(() => setLoading(false));
  }, []);

  const k1 = Object.keys(models)?.length;

  const filteredModels = useMemo(
    () =>
      Object.fromEntries(
        Object.entries(models).filter(([key]) =>
          selectedFilterModels.includes(key)
        )
      ),
    [k1, selectedFilterModels?.length]
  );

  const k2 = Object.keys(filteredModels)?.length;

  const classificationData = useMemo(
    () =>
      Object.entries(filteredModels).reduce(
        (result, [modelName, modelDetails]) => {
          result[modelName] = Object.fromEntries(
            Object.entries(modelDetails.classification_report).filter(
              ([key]) => (isAll ? true : key === selectedFilterMalware)
            )
          );
          return result;
        },
        {}
      ),
    [k2, selectedFilterMalware, isAll]
  );

  const distData = useMemo(
    () =>
      Object.entries(
        Object.fromEntries(
          Object.entries(report?.malware_distribution || {}).filter(([key]) =>
            isAll ? true : key === selectedFilterMalware
          )
        )
      ).reduce(
        (result, [modelName, modelValue]) => [
          ...result,
          { id: modelName, label: modelName, value: modelValue },
        ],
        []
      ),
    [k2, selectedFilterMalware, isAll]
  );

  const confusionMatrixData = useMemo(
    () =>
      Object.entries(filteredModels).reduce(
        (result, [modelName, modelDetails]) => {
          result[modelName] = modelDetails.confusion_matrix;
          return result;
        },
        {}
      ),
    [k2]
  );

  const modelFilterOptions = useMemo(() => Object.keys(models), [k1]);
  const malwareFilterOptions = useMemo(
    () => [ALL, ...Object.keys(report.malware_distribution || {})],
    [report?.report_id]
  );

  return (
    <PageLayout>
      <Typography variant="h5" sx={{ mb: 4, fontWeight: 600 }}>
        Analytical Report
      </Typography>
      <Grid2 container spacing={2}>
        <Grid2 size={12} maxWidth="calc(100vw - 300px)">
          <Metadata report={report} />
        </Grid2>
        <Grid2 size={12}>
          <Box>
            <FormControl sx={{ m: 1, minWidth: 300 }}>
              <InputLabel>Filter by Models</InputLabel>
              <Select
                multiple
                value={selectedFilterModels}
                onChange={(event) =>
                  setSelectedFilterModels(event?.target?.value)
                }
                input={<OutlinedInput label="Filter by Models" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {selected.map((value) => (
                      <Chip key={value} label={value} />
                    ))}
                  </Box>
                )}
              >
                {modelFilterOptions?.map((name) => (
                  <MenuItem key={name} value={name}>
                    {name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <FormControl sx={{ m: 1, minWidth: 200 }}>
              <InputLabel>Filter by Malware Class</InputLabel>
              <Select
                value={selectedFilterMalware}
                onChange={(event) =>
                  setSelectedFilterMalware(event?.target?.value)
                }
                input={<OutlinedInput label="Filter by Malware Class" />}
                renderValue={(value) => <Chip key={value} label={value} />}
              >
                {malwareFilterOptions?.map((name) => (
                  <MenuItem key={name} value={name}>
                    {name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>
        </Grid2>
        {isAll ? (
          <Grid2 size={12}>
            {Object.entries(confusionMatrixData)?.map(([key, data]) => (
              <Paper key={key} style={{ maxWidth: "1220px" }}>
                <ConfusionMatrixTable
                  title={key}
                  loading={loading}
                  labels={Object.keys(report?.malware_distribution || {})}
                  data={data}
                />
              </Paper>
            ))}
          </Grid2>
        ) : (
          <Grid2 container spacing={2}>
            {Object.entries(classificationData)?.map(([key, data]) => (
              <Grid2 key={key} item size={6} sx={{ minWidth: "500px" }}>
                <ConfusionMatrixTable
                  title={key}
                  loading={loading}
                  labels={[selectedFilterMalware, "Others"]}
                  data={data[selectedFilterMalware]?.confusion_matrix}
                />
              </Grid2>
            ))}
          </Grid2>
        )}
        <Grid2 size={6}>
          <MalwareDistChart loading={loading} data={distData} />
        </Grid2>
        {isAll && (
          <Grid2 size={6}>
            <BarChart loading={loading} models={filteredModels} />
          </Grid2>
        )}

        <Grid2 size={isAll ? 12 : 6}>
          <MultiBarChart
            loading={loading}
            label="Classification Report"
            data={classificationData}
          />
        </Grid2>
      </Grid2>
    </PageLayout>
  );
};

export default ReportPage;
