/* eslint-disable react-hooks/exhaustive-deps */
import { BarChart } from "@mui/x-charts/BarChart";
import { Paper } from "@mui/material"; // Import Paper for background
import { Typography } from "@mui/material";
import { colors } from "./constants";
import { useMemo } from "react";

const mapData = (series) => {
  const result = Object.keys(series[0] || {})?.map((k) => {
    if (!["accuracy", "macro avg", "weighted avg"].includes(k)) {
      return { data: [], label: k };
    } else {
      return null;
    }
  });

  series?.forEach((model) => {
    Object.values(model)?.forEach((item, i) => {
      if (result[i]?.data) {
        result[i].data.push(item.precision || 0);
      }
    });
  });

  return result?.filter((val) => val);
};

const getMin = (items) =>
  Math.min(...(items?.flatMap(({ data }) => data || []) || []), 0.8) * 0.95;

// eslint-disable-next-line react/prop-types
export default function Chart({ label, data, loading }) {
  const labels = Object.keys(data);
  const series = Object.values(data);

  const result = useMemo(() => mapData(series), [labels?.length]);
  const min = useMemo(() => getMin(result), [labels?.length]);

  return (
    <Paper
      variant="outlined"
      style={{ padding: "16px", backgroundColor: "white" }}
    >
      <Typography fontWeight="600" variant="h6" gutterBottom>
        {label}
      </Typography>
      <BarChart
        loading={loading}
        slotProps={{ legend: { hidden: true } }}
        colors={colors}
        borderRadius={4}
        resolveSizeBeforeRender
        height={400}
        series={result}
        xAxis={[{ data: labels, scaleType: "band", categoryGapRatio: 0.2 }]}
        yAxis={[{ min }]}
      />
    </Paper>
  );
}
