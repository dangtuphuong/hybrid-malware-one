/* eslint-disable react/prop-types */
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Button,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import { tableCellClasses } from "@mui/material/TableCell";
import { useState } from "react";

const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: theme.palette.grey[800],
    color: theme.palette.common.white,
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: 14,
  },
}));

const setPastelRedBackgroundColor = (percentage) =>
  `rgba(255, 205, 210, ${percentage * 0.1})`;

const ConfusionMatrixTable = ({ title, data, labels }) => {
  const [seeMore, setSeeMore] = useState(false);

  const shouldSlice = (data?.length > 10) & !seeMore;
  const items = shouldSlice ? data?.slice(0, 10) : data;

  return data?.length ? (
    <TableContainer component={Paper} sx={{ marginBottom: "20px" }}>
      <Table>
        <TableHead>
          {title && (
            <TableRow>
              <TableCell colSpan={labels?.length} align="center">
                {data?.length > 10 && (
                  <Button
                    onClick={() => setSeeMore(!seeMore)}
                    sx={{ float: "left", textTransform: "none" }}
                  >
                    See {seeMore ? "Less" : "All"}
                  </Button>
                )}
                <Typography
                  fontWeight="600"
                  variant="h6"
                  sx={{ display: "inline-block" }}
                >
                  {title} - Confusion Matrix
                </Typography>
              </TableCell>
            </TableRow>
          )}
          <TableRow>
            <StyledTableCell>Actual / Predicted</StyledTableCell>
            {labels?.slice(0, items?.length)?.map((label) => (
              <StyledTableCell key={label} align="center">
                {label}
              </StyledTableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {items?.map((row, rowIndex) => (
            <TableRow key={rowIndex}>
              <StyledTableCell>{labels[rowIndex]}</StyledTableCell>
              {(shouldSlice && Array.isArray(row) ? row.slice(0, 10) : row).map(
                (value, colIndex) => {
                  const total = row.reduce((r, a) => r + a, 0);
                  const percentage = total > 0 ? (value * 100) / total : 0;

                  return (
                    <StyledTableCell
                      key={colIndex}
                      align="center"
                      sx={
                        rowIndex === colIndex
                          ? {
                              color: "green",
                              fontWeight: 600,
                              backgroundColor: "#F4FBF4",
                            }
                          : {
                              backgroundColor:
                                setPastelRedBackgroundColor(percentage),
                            }
                      }
                    >
                      {value}
                    </StyledTableCell>
                  );
                }
              )}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  ) : null;
};

export default ConfusionMatrixTable;
