/* eslint-disable react-hooks/exhaustive-deps */
import { useState, useEffect, useMemo } from "react";
import {
  Box,
  Button,
  Container,
  Typography,
  Paper,
  LinearProgress,
  Autocomplete,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from "@mui/material";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import DataService from "../services/data-service";
import PageLayout from "../components/PageLayout";

const getModels = (reports) => {
  const options = [];

  reports?.forEach(
    ({ name, created_at, hybrid_model_id, rf_model_id, xgb_model_id }) => {
      if (hybrid_model_id) {
        options.push({
          id: hybrid_model_id,
          label: `Hybrid (${hybrid_model_id})`,
          value: hybrid_model_id,
          report: `${name} - ${created_at}`,
        });
      }
      if (rf_model_id) {
        options.push({
          id: rf_model_id,
          label: `Random Forest (${rf_model_id})`,
          value: rf_model_id,
          report: `${name} - ${created_at}`,
        });
      }
      if (xgb_model_id) {
        options.push({
          id: xgb_model_id,
          label: `XGBoost (${xgb_model_id})`,
          value: xgb_model_id,
          report: `${name} - ${created_at}`,
        });
      }
    }
  );

  return options;
};

const PredictPage = () => {
  const [loading, setLoading] = useState(false);
  const [reports, setReports] = useState([]);
  const [file, setFile] = useState(null);
  const [modelID, setModelID] = useState(null);
  const [keyCol, setKeyCol] = useState("");
  const [result, setResult] = useState(null);
  const [mess, setMess] = useState("");

  useEffect(() => {
    DataService.getReports()
      .then((res) => {
        setReports(res?.data?.items ?? []);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  const canSubmit = !!file;

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!canSubmit) {
      setMess("Please fill out all required fields.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("model_id", modelID);
    formData.append("key_column", keyCol);

    setLoading(true);
    DataService.predictByModel(formData)
      .then((res) => {
        console.log("Success:", res);
        setResult(res?.data);
      })
      .catch((error) => {
        console.error("Error:", error);
        setMess("Failed to upload data.");
      })
      .finally(() => setLoading(false));
  };

  const handleCancel = () => {
    setMess("");
    setFile(null);
  };

  const options = useMemo(() => getModels(reports), [reports?.length]);

  return (
    <PageLayout>
      <Typography variant="h4">Upload Data to Generate Predictions</Typography>
      <Container maxWidth="md">
        <Box sx={{ mt: 4, p: "30px 60px", bgcolor: "white", borderRadius: 2 }}>
          <form onSubmit={handleSubmit}>
            <Box
              sx={{ display: "flex", justifyContent: "space-between", mb: 3 }}
            >
              <Autocomplete
                options={options}
                groupBy={(option) => option.report}
                sx={{ flex: 1 }}
                renderInput={(params) => (
                  <TextField {...params} label="Model ID" />
                )}
                onChange={(event, newValue) => setModelID(newValue?.value)}
              />
              <TextField
                disabled={loading}
                label="File Name Column"
                value={keyCol}
                onChange={(e) => setKeyCol(e.target.value)}
                sx={{ flex: 1, marginLeft: 1 }}
              />
            </Box>
            <Paper
              variant="outlined"
              sx={{
                padding: 2,
                textAlign: "center",
                mb: 3,
                borderStyle: "dashed",
              }}
            >
              <CloudUploadIcon fontSize="large" />
              {file ? (
                <Typography variant="body1" sx={{ mt: 2 }}>
                  Selected file: {file.name}
                </Typography>
              ) : (
                <>
                  <Typography variant="body1" gutterBottom>
                    Select a file or drag and drop here
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    CSV file
                  </Typography>
                </>
              )}
              <Button
                variant="outlined"
                component="label"
                disabled={loading}
                sx={{ mt: 2, textTransform: "none" }}
              >
                Select File
                <input
                  type="file"
                  hidden
                  onChange={handleFileChange}
                  required
                  disabled={loading}
                />
              </Button>
            </Paper>

            {loading && (
              <Box sx={{ width: "100%" }}>
                <LinearProgress />
              </Box>
            )}

            <Box
              sx={{
                display: "flex",
                justifyContent: "flex-end",
                gap: 1,
                mt: 5,
              }}
            >
              <Button variant="outlined" color="neutral" onClick={handleCancel}>
                Cancel
              </Button>
              <Button
                variant="contained"
                color="primary"
                type="submit"
                disabled={loading || !canSubmit}
              >
                Upload
              </Button>
            </Box>
          </form>
        </Box>
        {!!result && (
          <Box sx={{ mt: 4, borderRadius: 2 }}>
            <Typography fontWeight="600" variant="h6" sx={{ mb: 2 }}>
              {`Result from ${result?.model_label} Model`}
            </Typography>
            <TableContainer component={Paper}>
              <Table sx={{ minWidth: 650 }} aria-label="simple table">
                <TableHead>
                  <TableRow>
                    <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>
                    <TableCell sx={{ fontWeight: 600 }}>Prediction</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {Object.entries(result?.predictions)?.map(([key, value]) => (
                    <TableRow
                      key={key}
                      sx={{
                        "&:last-child td, &:last-child th": { border: 0 },
                      }}
                    >
                      <TableCell>{key}</TableCell>
                      <TableCell>{value}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        )}
      </Container>
    </PageLayout>
  );
};

export default PredictPage;
