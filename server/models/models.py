import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier, StackingClassifier
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split, cross_val_score

# Get user input for the dataset path
file_path = input("Please enter the path to the dataset: ")

# Get user input for the column separator
separator = input("Please enter the column separator: ")

# Load dataset
data = pd.read_csv(file_path, sep=separator)

# Get user input for feature columns
feature_input = input(
    f"Please enter the feature columns separated by '{separator}': ")
feature_columns = [feature.strip()
                   for feature in feature_input.split(separator)]

# Get user input for target column
target_column = input("Please enter the target column name: ").strip()

# Handle missing values
data = data.ffill()

# Split the data into features and target
X = data[feature_columns]
y = data[target_column]

# Split into training and temp (validation + test) sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2)

# Split the temp set into validation and test sets
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.7)

### 2. Train and Evaluate Random Forest Model ###
rf_model = RandomForestClassifier(n_estimators=200)
rf_model.fit(X_train, y_train)

# Cross-Validation for Random Forest
rf_cv_scores = cross_val_score(rf_model, X_train, y_train, cv=5)
print("Random Forest Cross-Validation Scores:", rf_cv_scores)

rf_train_preds = rf_model.predict(X_train)
rf_test_preds = rf_model.predict(X_test)

### Output metrics for Random Forest on Validation Set ###
rf_val_preds = rf_model.predict(X_val)
print("\n### Random Forest Validation Metrics ###")
print(f"Accuracy: {accuracy_score(y_val, rf_val_preds)}")
print(f"Precision: {precision_score(
    y_val, rf_val_preds, average='macro', zero_division=1)}")
print(f"Recall: {recall_score(
    y_val, rf_val_preds, average='macro', zero_division=1)}")
print(f"F1 Score: {
      f1_score(y_val, rf_val_preds, average='macro', zero_division=1)}")
print(classification_report(y_val, rf_val_preds, zero_division=1))

### 3. Train and Evaluate XGBoost Model ###
xgb_model = xgb.XGBClassifier(n_estimators=200, eval_metric='mlogloss')
xgb_model.fit(X_train, y_train)

# Cross-Validation for XGBoost
xgb_cv_scores = cross_val_score(xgb_model, X_train, y_train, cv=5)
print("XGBoost Cross-Validation Scores:", xgb_cv_scores)

xgb_train_preds = xgb_model.predict(X_train)
xgb_test_preds = xgb_model.predict(X_test)

### Output metrics for XGBoost on Validation Set ###
xgb_val_preds = xgb_model.predict(X_val)
print("\n### XGBoost Validation Metrics ###")
print(f"Accuracy: {accuracy_score(y_val, xgb_val_preds)}")
print(f"Precision: {precision_score(
    y_val, xgb_val_preds, average='macro', zero_division=1)}")
print(f"Recall: {recall_score(
    y_val, xgb_val_preds, average='macro', zero_division=1)}")
print(f"F1 Score: {
      f1_score(y_val, xgb_val_preds, average='macro', zero_division=1)}")
print(classification_report(y_val, xgb_val_preds, zero_division=1))

### 4. Create and Evaluate Stacked Model ###
# Define base models
base_models = [
    ('rf', rf_model),
    ('xgb', xgb_model)
]

# Create stacking model
stacked_model = StackingClassifier(
    estimators=base_models, final_estimator=RandomForestClassifier())

# Fit the stacked model
stacked_model.fit(X_train, y_train)

# Cross-Validation for Stacked Model
stacked_cv_scores = cross_val_score(stacked_model, X_train, y_train, cv=5)
print("Stacked Model Cross-Validation Scores:", stacked_cv_scores)

# Predictions
stacked_train_preds = stacked_model.predict(X_train)
stacked_test_preds = stacked_model.predict(X_test)

### Output metrics for Stacked Model on Validation Set ###
stacked_val_preds = stacked_model.predict(X_val)
print("\n### Stacked Model Validation Metrics ###")
print(f"Accuracy: {accuracy_score(y_val, stacked_val_preds)}")
print(f"Precision: {precision_score(
    y_val, stacked_val_preds, average='macro', zero_division=1)}")
print(f"Recall: {recall_score(
    y_val, stacked_val_preds, average='macro', zero_division=1)}")
print(f"F1 Score: {
      f1_score(y_val, stacked_val_preds, average='macro', zero_division=1)}")
print(classification_report(y_val, stacked_val_preds, zero_division=1))
