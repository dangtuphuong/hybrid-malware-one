import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split, GridSearchCV

# Get user input for the dataset path
file_path = input("Please enter the path to the dataset: ")

# Get user input for the column separator
separator = input("Please enter the column separator: ")

# Load dataset
data = pd.read_csv(file_path, sep=separator)

# Get user input for feature columns
feature_input = input(
    f"Please enter the feature columns separated by '{separator}': ")
feature_columns = [feature.strip()
                   for feature in feature_input.split(separator)]

# Get user input for target column
target_column = input("Please enter the target column name: ").strip()

# Handle missing values in features and target
X = data[feature_columns].fillna(data[feature_columns].mean())
y = data[target_column].ffill()

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

# Hyperparameter grid for Random Forest
rf_param_grid = {
    'n_estimators': [50, 100, 200, 500],
}

# Random Forest Grid Search
rf_model = RandomForestClassifier(random_state=42)
rf_grid_search = GridSearchCV(estimator=rf_model, param_grid=rf_param_grid,
                              scoring='accuracy', cv=5, n_jobs=-1)
rf_grid_search.fit(X_train, y_train)

print("\n### Best Random Forest Parameters ###")
print(rf_grid_search.best_params_)

# Update Random Forest Model with best parameters
best_rf_model = RandomForestClassifier(**rf_grid_search.best_params_)
best_rf_model.fit(X_train, y_train)

# Predictions and metrics for Random Forest
rf_test_preds = best_rf_model.predict(X_test)
print("\n### Random Forest Model ###")
print(f"Accuracy: {accuracy_score(y_test, rf_test_preds)}")
print(f"Precision: {precision_score(
    y_test, rf_test_preds, average='macro', zero_division=1)}")
print(f"Recall: {recall_score(y_test, rf_test_preds,
      average='macro', zero_division=1)}")
print(f"F1 Score: {f1_score(y_test, rf_test_preds,
      average='macro', zero_division=1)}")
print(classification_report(y_test, rf_test_preds, zero_division=1))
