import pytest
from unittest.mock import patch, MagicMock
from flask import json
from app import app


@pytest.fixture
def client():
    app.testing = True
    with app.test_client() as client:
        yield client


@patch("app.connect_to_db")
def test_authenticate_user_success(mock_connect, client):
    mock_connection = MagicMock()
    mock_connect.return_value = mock_connection
    mock_cursor = MagicMock()
    mock_connection.cursor.return_value = mock_cursor

    # Simulate a successful user fetch
    mock_cursor.fetchone.return_value = {
        "id": 1,
        "email": "admin@malware.one",
        "password": "123",
    }

    response = client.post(
        "/api/authenticate",
        json={"email": "admin@malware.one", "password": "123"},
    )

    assert response.status_code == 200
    data = json.loads(response.data)
    assert data["message"] == "Authentication successful"
    assert data["user"]["email"] == "admin@malware.one"


@patch("app.connect_to_db")
def test_authenticate_user_invalid_credentials(mock_connect, client):
    mock_connection = MagicMock()
    mock_connect.return_value = mock_connection
    mock_cursor = MagicMock()
    mock_connection.cursor.return_value = mock_cursor

    # Simulate no user found
    mock_cursor.fetchone.return_value = None

    response = client.post(
        "/api/authenticate",
        json={"email": "wrong@example.com", "password": "wrongpassword"},
    )

    assert response.status_code == 401
    data = json.loads(response.data)
    assert data["error"] == "Invalid email or password"


@patch("app.connect_to_db")
def test_authenticate_user_missing_email(mock_connect, client):
    response = client.post("/api/authenticate", json={"password": "123"})

    assert response.status_code == 400
    data = json.loads(response.data)
    assert data["error"] == "Missing email or password"


@patch("app.connect_to_db")
def test_authenticate_user_missing_password(mock_connect, client):
    response = client.post("/api/authenticate", json={"email": "admin@malware.one"})

    assert response.status_code == 400
    data = json.loads(response.data)
    assert data["error"] == "Missing email or password"


@patch("app.connect_to_db")
def test_authenticate_user_db_connection_error(mock_connect, client):
    mock_connect.return_value = None

    response = client.post(
        "/api/authenticate",
        json={"email": "admin@malware.one", "password": "123"},
    )

    assert response.status_code == 500
    data = json.loads(response.data)
    assert data["error"] == "Unable to connect to the database"
