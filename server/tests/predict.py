import pytest
from flask import Flask
from io import BytesIO
import json
from app import app


@pytest.fixture
def client():
    with app.test_client() as client:
        yield client


def test_predict_success(client, monkeypatch):
    # Mocking the predict_from_model function
    def mock_predict_from_model(file, model_id, key_column):
        return {"prediction": "success"}

    monkeypatch.setattr("app.predict_from_model", mock_predict_from_model)

    data = {
        "file": (BytesIO(b"some binary data"), "test.csv"),
        "model_id": "test_model",
        "key_column": "id",
    }
    response = client.post(
        "/api/predict", data=data, content_type="multipart/form-data"
    )

    assert response.status_code == 200
    assert json.loads(response.data) == {"prediction": "success"}


def test_predict_missing_file(client):
    data = {
        "model_id": "test_model",
    }
    response = client.post(
        "/api/predict", data=data, content_type="multipart/form-data"
    )

    assert response.status_code == 500
    assert "error" in json.loads(response.data)


def test_predict_file_not_found(client, monkeypatch):
    def mock_predict_from_model(file, model_id, key_column):
        raise FileNotFoundError("File not found")

    monkeypatch.setattr("app.predict_from_model", mock_predict_from_model)

    data = {
        "file": (BytesIO(b"some binary data"), "test.csv"),
        "model_id": "test_model",
    }
    response = client.post(
        "/api/predict", data=data, content_type="multipart/form-data"
    )

    assert response.status_code == 404
    assert "error" in json.loads(response.data)


def test_predict_value_error(client, monkeypatch):
    def mock_predict_from_model(file, model_id, key_column):
        raise ValueError("Invalid value")

    monkeypatch.setattr("app.predict_from_model", mock_predict_from_model)

    data = {
        "file": (BytesIO(b"some binary data"), "test.csv"),
        "model_id": "test_model",
    }
    response = client.post(
        "/api/predict", data=data, content_type="multipart/form-data"
    )

    assert response.status_code == 400
    assert "error" in json.loads(response.data)


def test_predict_unexpected_error(client, monkeypatch):
    def mock_predict_from_model(file, model_id, key_column):
        raise Exception("Unexpected error")

    monkeypatch.setattr("app.predict_from_model", mock_predict_from_model)

    data = {
        "file": (BytesIO(b"some binary data"), "test.csv"),
        "model_id": "test_model",
    }
    response = client.post(
        "/api/predict", data=data, content_type="multipart/form-data"
    )

    assert response.status_code == 500
    assert "error" in json.loads(response.data)
