import pytest
from unittest.mock import patch
from flask import json
from io import BytesIO
from app import app


@pytest.fixture
def client():
    app.testing = True
    with app.test_client() as client:
        yield client


@patch("app.train_models")
@patch("app.store_metrics")
def test_train_success(mock_store_metrics, mock_train_models, client):
    # Mock return values for train_models and store_metrics
    mock_train_models.return_value = (
        {"malware_type": 50, "benign_type": 50},  # malware_distribution
        {"accuracy": 0.95},  # rf_metrics
        {"accuracy": 0.90},  # xgb_metrics
        {"accuracy": 0.92},  # hybrid_metrics
        [1, 2, 3],  # model_ids
    )
    mock_store_metrics.return_value = 123  # Mock report ID

    # Create a mock file and other form data
    data = {
        "file": (BytesIO(b"mock file content"), "test.csv"),
        "separator": ",",
        "features": "feature1,feature2",
        "target": "target",
        "name": "Test Report",
        "created_by": "Tester",
        "train_models_str": "rf,xgb,hybrid",
    }

    response = client.post("/api/train", data=data)

    assert response.status_code == 200
    response_data = json.loads(response.data)
    assert response_data["report_id"] == 123
    assert response_data["rf_metrics"]["accuracy"] == 0.95
    assert response_data["xgb_metrics"]["accuracy"] == 0.90
    assert response_data["hybrid_metrics"]["accuracy"] == 0.92
    assert response_data["model_ids"] == [1, 2, 3]


@patch("app.train_models")
@patch("app.store_metrics")
def test_train_store_metrics_failure(mock_store_metrics, mock_train_models, client):
    mock_train_models.return_value = (
        {"malware_type": 50, "benign_type": 50},  # malware_distribution
        {"accuracy": 0.95},  # rf_metrics
        {"accuracy": 0.90},  # xgb_metrics
        {"accuracy": 0.92},  # hybrid_metrics
        [1, 2, 3],  # model_ids
    )
    mock_store_metrics.side_effect = Exception("Database error")

    data = {
        "file": (BytesIO(b"mock file content"), "test.csv"),
        "separator": ",",
        "features": "feature1,feature2",
        "target": "target",
        "name": "Test Report",
        "created_by": "Tester",
        "train_models_str": "rf,xgb,hybrid",
    }

    response = client.post("/api/train", data=data)

    assert response.status_code == 500
    response_data = json.loads(response.data)
    assert "Failed to store metrics:" in response_data["error"]


def test_train_missing_file(client):
    data = {
        "separator": ",",
        "features": "feature1,feature2",
        "target": "target",
        "name": "Test Report",
        "created_by": "Tester",
        "train_models_str": "rf,xgb,hybrid",
    }

    response = client.post("/api/train", data=data)

    assert response.status_code == 500
    response_data = json.loads(response.data)
    assert "An unexpected error occurred:" in response_data["error"]
