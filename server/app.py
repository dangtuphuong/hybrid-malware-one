from flask import Flask, request, jsonify
from flask_cors import CORS
from controllers.train import train_models
from controllers.predict import predict_from_model
from controllers.extract import extract_features
from models.user import auth_user, reg_user
from models.report import get_reports, get_report_by_id, store_metrics
from models.model import get_models
from utils.cleanup_uploads import cleanup_uploads


app = Flask(__name__)
CORS(app)


@app.route("/api/authenticate", methods=["POST"])
def authenticate_user():
    data = request.json
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    return auth_user(email, password)


@app.route("/api/register", methods=["POST"])
def register_user():
    data = request.json
    name = data.get("name")
    email = data.get("email")
    password = data.get("password")
    role = data.get("role")

    if not name or not email or not password or not role:
        return jsonify({"error": "Missing name, email, password, or role"}), 400

    if role not in [0, 1]:
        return jsonify({"error": "Role must be either 0 or 1"}), 400

    return reg_user(name, email, password, role)


@app.route("/api/train", methods=["POST"])
def train():
    try:
        file = request.files["file"]
        separator = request.form["separator"]
        feature_columns = request.form["features"].split(separator)
        target_column = request.form["target"]
        name = request.form["name"]
        created_by = request.form["created_by"]
        train_models_str = request.form["train_models_str"]

        malware_distribution, rf_metrics, xgb_metrics, hybrid_metrics, model_ids = (
            train_models(
                file, separator, feature_columns, target_column, train_models_str
            )
        )

        # Attempt to store metrics in the database
        report_id = None
        try:
            report_id = store_metrics(
                malware_distribution,
                rf_metrics,
                xgb_metrics,
                hybrid_metrics,
                model_ids,
                name,
                created_by,
                request.form["features"],
            )
        except Exception as store_error:
            return (
                jsonify({"error": "Failed to store metrics: " + str(store_error)}),
                500,
            )

        return (
            jsonify(
                {
                    "rf_metrics": rf_metrics,
                    "xgb_metrics": xgb_metrics,
                    "hybrid_metrics": hybrid_metrics,
                    "model_ids": model_ids,
                    "report_id": report_id,
                }
            ),
            200,
        )

    except Exception as e:
        return jsonify({"error": "An unexpected error occurred: " + str(e)}), 500


@app.route("/api/predict", methods=["POST"])
def predict():
    try:
        file = request.files["file"]
        model_id = request.form["model_id"]
        key_column = (
            request.form.get("key_column") or None
            if request.form.get("key_column") != ""
            else None
        )

        if file.filename.endswith(".csv"):
            # Handle .csv file processing
            results = predict_from_model(file, model_id, key_column)
        else:
            # Handle .exe file processing
            extracted_file = extract_features(file)
            results = predict_from_model(extracted_file, model_id, is_PE=True)

            # Clean up uploads folder
            cleanup_uploads()

        return jsonify(results), 200

    except FileNotFoundError as e:
        return jsonify({"error": str(e)}), 404
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": "An unexpected error occurred: " + str(e)}), 500


@app.route("/api/report/<report_id>", methods=["GET"])
def get_report(report_id):
    return get_report_by_id(report_id)


@app.route("/api/reports", methods=["GET"])
def get_all_reports():
    return get_reports()


@app.route("/api/models", methods=["GET"])
def get_all_models():
    return get_models()


if __name__ == "__main__":
    app.run()
