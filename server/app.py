from flask import Flask, request, jsonify
from flask_cors import CORS
from mysql.connector import Error
from models.train import train_models
from models.predict import predict_from_models
from utils.connect_to_db import connect_to_db
from utils.store_to_db import store_metrics

app = Flask(__name__)
CORS(app)


@app.route('/api/authenticate', methods=['POST'])
def authenticate_user():
    data = request.json
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    connection = connect_to_db()
    if not connection:
        return jsonify({"error": "Unable to connect to the database"}), 500

    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute(
            "SELECT * FROM users WHERE email = %s AND password = %s", (email, password))
        user = cursor.fetchone()

        if user:
            return jsonify({"message": "Authentication successful", "user": user}), 200
        else:
            return jsonify({"error": "Invalid email or password"}), 401
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@app.route('/api/register', methods=['POST'])
def register_user():
    data = request.json
    name = data.get('name')
    email = data.get('email')
    password = data.get('password')
    role = data.get('role')

    if not name or not email or not password or not role:
        return jsonify({"error": "Missing name, email, password, or role"}), 400

    if role not in [0, 1]:
        return jsonify({"error": "Role must be either 0 or 1"}), 400

    connection = connect_to_db()
    if not connection:
        return jsonify({"error": "Unable to connect to the database"}), 500

    try:
        cursor = connection.cursor()

        # Insert user into the database
        sql = "INSERT INTO users (name, email, password, role) VALUES (%s, %s, %s, %s)"
        val = (name, email, password, role)
        cursor.execute(sql, val)

        connection.commit()

        # Fetch the newly registered user
        cursor.execute(
            "SELECT id, name, email, role FROM users WHERE email = %s", (email,))
        user_data = cursor.fetchone()
        if user_data:
            user = {
                "id": user_data[0],
                "name": user_data[1],
                "email": user_data[2],
                "role": user_data[3]
            }
            return jsonify({"message": "User registered successfully", "user": user}), 200
        else:
            return jsonify({"error": "User registration failed"}), 500

    except Error as e:
        return jsonify({"error": str(e)}), 500

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@app.route('/api/train', methods=['POST'])
def train():
    try:
        file = request.files['file']
        separator = request.form['separator']
        feature_columns = request.form['features'].split(separator)
        target_column = request.form['target']

        rf_metrics, xgb_metrics, hybrid_metrics, model_ids = train_models(
            file, separator, feature_columns, target_column)

        # Attempt to store metrics in the database
        try:
            store_metrics(rf_metrics, xgb_metrics, hybrid_metrics, model_ids)
        except Exception as store_error:
            return jsonify({"error": "Failed to store metrics: " + str(store_error)}), 500

        return jsonify({
            'rf_metrics': rf_metrics,
            'xgb_metrics': xgb_metrics,
            'hybrid_metrics': hybrid_metrics,
            'model_ids': model_ids
        }), 200

    except Exception as e:
        return jsonify({"error": "An unexpected error occurred: " + str(e)}), 500


@app.route('/api/predict', methods=['POST'])
def predict():
    try:
        file = request.files['file']
        separator = request.form['separator']
        feature_columns = request.form['features'].split(separator)

        results = predict_from_models(file, separator, feature_columns)

        return jsonify(results), 200

    except FileNotFoundError as e:
        return jsonify({"error": str(e)}), 404
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": "An unexpected error occurred: " + str(e)}), 500


if __name__ == '__main__':
    app.run()
