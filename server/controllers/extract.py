import pefile
import os
import math
import pandas as pd


def calculate_entropy(data):
    # Calculate the entropy of a byte array
    if not data:
        return 0
    frequency = {}
    for byte in data:
        frequency[byte] = frequency.get(byte, 0) + 1
    entropy = 0.0
    for freq in frequency.values():
        probability = freq / len(data)
        entropy -= probability * math.log2(probability)
    return entropy


def extract_features(file, separator):
    pe_file_path = os.path.join("uploads", file.filename)

    if not os.path.exists(pe_file_path):
        file.save(pe_file_path)

    features = {}

    features["file_name"] = os.path.basename(pe_file_path)

    try:
        pe = pefile.PE(pe_file_path)
    except pefile.PEFormatError as e:
        print(f"Error parsing PE file {pe_file_path}: {e}")
        return None
    except Exception as e:
        print(f"Unexpected error when loading PE file {pe_file_path}: {e}")
        return None

    # PE Header fields
    try:
        features["e_magic"] = pe.DOS_HEADER.e_magic
        features["e_cblp"] = pe.DOS_HEADER.e_cblp
        features["e_cp"] = pe.DOS_HEADER.e_cp
        features["e_crlc"] = pe.DOS_HEADER.e_crlc
        features["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        features["e_minalloc"] = pe.DOS_HEADER.e_minalloc
        features["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        features["e_ss"] = pe.DOS_HEADER.e_ss
        features["e_sp"] = pe.DOS_HEADER.e_sp
        features["e_csum"] = pe.DOS_HEADER.e_csum
        features["e_ip"] = pe.DOS_HEADER.e_ip
        features["e_cs"] = pe.DOS_HEADER.e_cs
        features["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        features["e_ovno"] = pe.DOS_HEADER.e_ovno
        features["e_oemid"] = pe.DOS_HEADER.e_oemid
        features["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        features["e_lfanew"] = pe.DOS_HEADER.e_lfanew
    except AttributeError as e:
        print(f"Error accessing DOS header fields: {e}")

    # File Header fields
    try:
        features["Machine"] = pe.FILE_HEADER.Machine
        features["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        features["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        features["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        features["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        features["Characteristics"] = pe.FILE_HEADER.Characteristics
    except AttributeError as e:
        print(f"Error accessing file header fields: {e}")

    # Optional Header fields
    try:
        if hasattr(pe.OPTIONAL_HEADER, "Signature"):
            features["Signature"] = pe.OPTIONAL_HEADER.Signature
        features["Magic"] = pe.OPTIONAL_HEADER.Magic
        features["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        features["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        features["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        features["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        features["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        features["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        features["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode

        # Handle BaseOfData only for certain PE formats
        if hasattr(pe.OPTIONAL_HEADER, "BaseOfData"):
            features["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData

        features["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        features["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        features["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        features["MajorOperatingSystemVersion"] = (
            pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        )
        features["MinorOperatingSystemVersion"] = (
            pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        )
        features["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        features["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        features["MajorSubsystemVersion"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        features["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        features["Reserved1"] = pe.OPTIONAL_HEADER.Reserved1
        features["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        features["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        features["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        features["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        features["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        features["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        features["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        features["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        features["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        features["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        features["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except AttributeError as e:
        print(f"Error accessing optional header fields: {e}")

    # Data Directory fields
    try:
        data_directory = pe.OPTIONAL_HEADER.DATA_DIRECTORY
        features["EXPORT_VA"] = (
            data_directory[0].VirtualAddress if len(data_directory) > 0 else 0
        )
        features["EXPORT_Size"] = (
            data_directory[0].Size if len(data_directory) > 0 else 0
        )
        features["IMPORT_VA"] = (
            data_directory[1].VirtualAddress if len(data_directory) > 1 else 0
        )
        features["IMPORT_Size"] = (
            data_directory[1].Size if len(data_directory) > 1 else 0
        )
        features["RESOURCE_VA"] = (
            data_directory[2].VirtualAddress if len(data_directory) > 2 else 0
        )
        features["RESOURCE_Size"] = (
            data_directory[2].Size if len(data_directory) > 2 else 0
        )
        features["EXCEPTION_VA"] = (
            data_directory[3].VirtualAddress if len(data_directory) > 3 else 0
        )
        features["EXCEPTION_Size"] = (
            data_directory[3].Size if len(data_directory) > 3 else 0
        )
        features["SECURITY_VA"] = (
            data_directory[4].VirtualAddress if len(data_directory) > 4 else 0
        )
        features["SECURITY_Size"] = (
            data_directory[4].Size if len(data_directory) > 4 else 0
        )
        features["BASERELOC_VA"] = (
            data_directory[5].VirtualAddress if len(data_directory) > 5 else 0
        )
        features["BASERELOC_Size"] = (
            data_directory[5].Size if len(data_directory) > 5 else 0
        )
        features["DEBUG_VA"] = (
            data_directory[6].VirtualAddress if len(data_directory) > 6 else 0
        )
        features["DEBUG_Size"] = (
            data_directory[6].Size if len(data_directory) > 6 else 0
        )
        features["COPYRIGHT_VA"] = (
            data_directory[7].VirtualAddress if len(data_directory) > 7 else 0
        )
        features["COPYRIGHT_Size"] = (
            data_directory[7].Size if len(data_directory) > 7 else 0
        )
        features["GLOBALPTR_VA"] = (
            data_directory[8].VirtualAddress if len(data_directory) > 8 else 0
        )
        features["GLOBALPTR_Size"] = (
            data_directory[8].Size if len(data_directory) > 8 else 0
        )
        features["TLS_VA"] = (
            data_directory[9].VirtualAddress if len(data_directory) > 9 else 0
        )
        features["TLS_Size"] = data_directory[9].Size if len(data_directory) > 9 else 0
        features["LOAD_CONFIG_VA"] = (
            data_directory[10].VirtualAddress if len(data_directory) > 10 else 0
        )
        features["LOAD_CONFIG_Size"] = (
            data_directory[10].Size if len(data_directory) > 10 else 0
        )
        features["BOUND_IMPORT_VA"] = (
            data_directory[11].VirtualAddress if len(data_directory) > 11 else 0
        )
        features["BOUND_IMPORT_Size"] = (
            data_directory[11].Size if len(data_directory) > 11 else 0
        )
        features["IAT_VA"] = (
            data_directory[12].VirtualAddress if len(data_directory) > 12 else 0
        )
        features["IAT_Size"] = (
            data_directory[12].Size if len(data_directory) > 12 else 0
        )
        features["DELAY_IMPORT_VA"] = (
            data_directory[13].VirtualAddress if len(data_directory) > 13 else 0
        )
        features["DELAY_IMPORT_Size"] = (
            data_directory[13].Size if len(data_directory) > 13 else 0
        )
        features["COM_DESCRIPTOR_VA"] = (
            data_directory[14].VirtualAddress if len(data_directory) > 14 else 0
        )
        features["COM_DESCRIPTOR_Size"] = (
            data_directory[14].Size if len(data_directory) > 14 else 0
        )
    except AttributeError as e:
        print(f"Error accessing data directory fields: {e}")

    # Section Headers
    try:
        for section in pe.sections:
            section_name = section.Name.decode().strip("\x00").replace(".", "")
            features[f"{section_name}_VirtualAddress"] = section.VirtualAddress
            features[f"{section_name}_SizeOfRawData"] = section.SizeOfRawData
            features[f"{section_name}_Misc_VirtualSize"] = section.Misc_VirtualSize
            features[f"{section_name}_Entropy"] = calculate_entropy(section.get_data())
    except Exception as e:
        print(f"Error processing section headers: {e}")

    return save_features_to_csv(features, separator)


def save_features_to_csv(features, separator=","):
    output_file = "uploads/PE_Features.csv"

    # Create the uploads directory if it doesn't exist
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    # Save the features to CSV
    df = pd.DataFrame([features])
    df.to_csv(output_file, index=False, sep=separator)

    return output_file
